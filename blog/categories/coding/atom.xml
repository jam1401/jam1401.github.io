<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | Codebase]]></title>
  <link href="http://jam1401.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://jam1401.github.io/"/>
  <updated>2014-10-03T14:55:26-07:00</updated>
  <id>http://jam1401.github.io/</id>
  <author>
    <name><![CDATA[Jeff Morgan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pair Programming == Social Programming]]></title>
    <link href="http://jam1401.github.io/blog/2014/10/01/pair-programming-equals-equals-social-programming/"/>
    <updated>2014-10-01T15:22:14-07:00</updated>
    <id>http://jam1401.github.io/blog/2014/10/01/pair-programming-equals-equals-social-programming</id>
    <content type="html"><![CDATA[<p>In 2012 I spent just over a year learning, practicing and teaching eXtreme Programming (XP). One of the main components of XP, is the practice of pair programming. When I changed jobs in mid 2013 I have to say when asked that I was quite ambivalent about the power of pair programming. I could accept the two heads are better than one assertion, instant code review, really small feedback cycles as good things but stacked against TDD which I had swallowed hook line and sinker pairing was a bit of Meh! its ok but depends on the context.</p>

<p>My new job had no real development methodology to speak of and a very small dev team. In this environment I reverted back to my hunker down, put on the headphones and turn up the music too loud approach mode of coding. Recently I have taken on the refactoring of a largish platform (with no tests of course) and three weeks into this effort I beginning to get a fresh appreciation of pairing and that is that it breaks the monotony we all run into when on a large projects. Days of coding stories, refactoring, testing takes its strain and productivity wanes as your mind tries to break away and follow something more interesting. I realized when I was pairing this never happened even when engaged in the depths of dev-ops tasks. There was constant interaction with another human, sharing of ideas, arguing process and design issues and there was also the time to just sit back and watch someone else take the keyboard for a while, observing their flow, their style and more often than not learning.</p>

<p><img src="http://tctechcrunch2011.files.wordpress.com/2012/03/pair-programming.jpg" alt="" /></p>

<p>So I now see the real value of pair programming, at least to me, its Social! and that is a good thing. Having that constant interaction and change which once seems so strange is actually good for me. It breaks me out of the self centered monotony of hacking away at a single blob of code making incremental progress. Such things become less monotonous and Im fairly sure progress would be more swift with another set of eyes there would be another person to field questions later. Suffice it to say I am missing those pairing days I found so strange and unnecessary.</p>

<p>Lets be clear there are times when working solo is good, Pair programming is certainly not the be all and end all of programming practices. But in world without it, well it sure can be lonely sometimes.</p>
]]></content>
  </entry>
  
</feed>
